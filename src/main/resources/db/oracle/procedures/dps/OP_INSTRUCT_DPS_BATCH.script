create or replace PROCEDURE OP_INSTRUCT_DPS_BATCH
/***********************************************************************************/
/*  프로시져 이름 : OP_INSTRUCT_DPS_BATCH
/*  프로시져 호출 서비스 : 
/*  프로시져 설명 : DPS 작업 지시 프로시저 
/*  프로시져 로직 
/*    1. 대상 설비 STR => LIST 
/*  생성일시 : 2019-10-25
/*  작성자 : 양우람 
/*  개정 이력
/*    1. 2019-10-25 : 최초 작성
/***********************************************************************************/
(
    /* 도메인 ID */
    P_IN_DOMAIN_ID                IN NUMBER,
    /* 배치 ID */
    P_IN_BATCH_ID                 IN VARCHAR2,
    /* 대상 설비 리스트 */
    P_IN_EQUIP_ID_LIST            IN VARCHAR2,

    /* 결과 코드 */
    P_OUT_RESULT_CODE             OUT NUMBER,     -- (0 : 정상 종료, -20999 : 비정상 종료) 
    /* 결과 메시지 */
    P_OUT_MESSAGE                 OUT VARCHAR2    -- (OK : 정상 종료, etc : 종료 메시지 or 오류 메시지)
) 
IS
    /* 대상 설비 ID 테이블 */
    V_EQUIP_IDS    SYS.ODCIVARCHAR2LIST;
    
    /* 프로시저 내부에서 사용할 체크 카운트 */
    V_CHECK_CNT NUMBER;
    
    /* 주문 처리시 전체 랙을 이용할지 설정 */
    V_USE_ALL_RACK NUMBER := 1;
    
    /* 주문 처리시 랙에 대한 분할을 할지 설정 */
    V_USE_DIVIDE_ORDER NUMBER := 0;
    
    /* JOBBATCH */
    V_BATCH JOB_BATCHES%rowtype;
    
    /* 병합되는 배치 */
    V_MAIN_BATCH JOB_BATCHES%rowtype;
    
    /* 단수 단포 rack */
    V_OT_RACK RACKS%rowtype;
    
BEGIN
    -- 배치 조회 
    V_BATCH := OF_GET_JOB_BATCH(P_IN_DOMAIN_ID, P_IN_BATCH_ID);

    -- 대상 설비 STR => LIST 
    V_EQUIP_IDS := OF_COMMA_TO_ID_TABLE(P_IN_EQUIP_ID_LIST);
    
    -- 단수 단포 랙 조회 
    SELECT *
      INTO V_OT_RACK
      FROM RACKS
     WHERE DOMAIN_ID = P_IN_DOMAIN_ID
       AND AREA_CD = V_BATCH.AREA_CD
       AND STAGE_CD = V_BATCH.STAGE_CD
       AND ACTIVE_FLAG = 1
       AND JOB_TYPE = V_BATCH.JOB_TYPE
       AND RACK_TYPE = 'O';
       
     
    
    -- 작업 지시가 전체 호기 대상 
    IF( V_USE_ALL_RACK = 1 ) THEN
        -- 작업에 대한 랙 분할 기능 사용 유무 
        IF (V_USE_DIVIDE_ORDER = 1) THEN
            -- TODO : 나중에 .....
            P_OUT_RESULT_CODE := 0;
        ELSE 
            -- 현재 배치를 진행 할 stage 의 설비에 진행중인 배치 확인 
            SELECT COUNT(1) 
              INTO V_CHECK_CNT
              FROM JOB_BATCHES
             WHERE DOMAIN_ID = P_IN_DOMAIN_ID
               AND STATUS = 'RUN'
               AND JOB_TYPE = V_BATCH.JOB_TYPE
               AND AREA_CD = V_BATCH.AREA_CD
               AND STAGE_CD = V_BATCH.STAGE_CD;
               
            IF ( V_CHECK_CNT = 1 ) THEN
                -- 병합 
                SELECT *
                  INTO V_MAIN_BATCH
                  FROM JOB_BATCHES
                 WHERE DOMAIN_ID = P_IN_DOMAIN_ID
                   AND STATUS = 'RUN'
                   AND JOB_TYPE = V_BATCH.JOB_TYPE
                   AND AREA_CD = V_BATCH.AREA_CD
                   AND STAGE_CD = V_BATCH.STAGE_CD;
    
                -- 작업 배치 bath_group, status, instructed_At
                UPDATE JOB_BATCHES 
                   SET STATUS = 'MERGED'
                     , BATCH_GROUP_ID = V_MAIN_BATCH.BATCH_GROUP_ID
                     , INSTRUCTED_AT = SYSDATE
                     , BATCH_ORDER_QTY = 0
                     , BATCH_PCS = 0
                 WHERE ID = V_BATCH.ID;
                    
                -- 단수 단포 / 작업 실행 데이터 생성 
                INSERT INTO JOB_INSTANCES (ID, BATCH_ID
                                          , JOB_DATE, JOB_SEQ, JOB_TYPE, COM_CD, SHOP_CD
                                          , EQUIP_TYPE, EQUIP_CD, EQUIP_NM
                                          , ORDER_NO, SKU_CD, SKU_NM, INPUT_SEQ, BOX_TYPE_CD
                                          , PICK_QTY, ORDER_TYPE, STATUS
                                          , DOMAIN_ID, CREATOR_ID, UPDATER_ID, CREATED_AT, UPDATED_AT)
                SELECT OF_GET_GENERATE_UUID(), V_MAIN_BATCH.ID
                     , JOB_DATE, JOB_SEQ, JOB_TYPE, COM_CD, COM_CD
                     , EQUIP_TYPE, V_OT_RACK.RACK_CD, V_OT_RACK.RACK_CD
                     , ORDER_NO, SKU_CD, SKU_NM, 0, BOX_TYPE_CD
                     , SUM(ORDER_QTY) AS ORDER_QTY, ORDER_TYPE, 'BW'
                     , DOMAIN_ID, 'PROC', 'PROC', SYSDATE, SYSDATE
                  FROM ORDERS
                 WHERE DOMAIN_ID = V_BATCH.DOMAIN_ID
                   AND BATCH_ID = V_BATCH.ID
                   AND ORDER_TYPE = 'OT'
                 GROUP BY DOMAIN_ID, BATCH_ID, JOB_DATE, JOB_SEQ, JOB_TYPE, EQUIP_TYPE, ORDER_NO, ORDER_TYPE, COM_CD, SKU_CD, SKU_NM, BOX_TYPE_CD;
                  
                    
                -- 주문 데이터 batch_id, status update 
                UPDATE ORDERS
                   SET STATUS = DECODE(ORDER_TYPE , 'OT' , 'A' , 'I')
                     , BATCH_ID = V_MAIN_BATCH.ID
                     , EQUIP_CD = DECODE(ORDER_TYPE , 'OT' , V_OT_RACK.RACK_CD , NULL)
                     , EQUIP_NM = DECODE(ORDER_TYPE , 'OT' , V_OT_RACK.RACK_NM , NULL)
                 WHERE DOMAIN_ID = P_IN_DOMAIN_ID
                   AND BATCH_ID = V_BATCH.ID;
                 
                -- 배치 수량 update  
                UPDATE JOB_BATCHES
                   SET (BATCH_ORDER_QTY , BATCH_PCS) = ( SELECT COUNT(DISTINCT(ORDER_NO)) , SUM(ORDER_QTY) 
                                                           FROM ORDERS
                                                          WHERE DOMAIN_ID = P_IN_DOMAIN_ID
                                                            AND BATCH_ID = V_MAIN_BATCH.ID )
                 WHERE ID = V_MAIN_BATCH.ID;
                 
                
            ELSE 
                -- 작업 지시 
                -- 단수 단포 / 작업 실행 데이터 생성 
                INSERT INTO JOB_INSTANCES (ID, BATCH_ID
                                          , JOB_DATE, JOB_SEQ, JOB_TYPE, COM_CD, SHOP_CD
                                          , EQUIP_TYPE, EQUIP_CD, EQUIP_NM
                                          , ORDER_NO, SKU_CD, SKU_NM, INPUT_SEQ, BOX_TYPE_CD
                                          , PICK_QTY, ORDER_TYPE, STATUS
                                          , DOMAIN_ID, CREATOR_ID, UPDATER_ID, CREATED_AT, UPDATED_AT)
                SELECT OF_GET_GENERATE_UUID(), BATCH_ID
                     , JOB_DATE, JOB_SEQ, JOB_TYPE, COM_CD, COM_CD
                     , EQUIP_TYPE, V_OT_RACK.RACK_CD, V_OT_RACK.RACK_CD
                     , ORDER_NO, SKU_CD, SKU_NM, 0, BOX_TYPE_CD
                     , SUM(ORDER_QTY) AS ORDER_QTY, ORDER_TYPE, 'BW'
                     , DOMAIN_ID, 'PROC', 'PROC', SYSDATE, SYSDATE
                  FROM ORDERS
                 WHERE DOMAIN_ID = V_BATCH.DOMAIN_ID
                   AND BATCH_ID = V_BATCH.ID
                   AND ORDER_TYPE = 'OT'
                 GROUP BY DOMAIN_ID, BATCH_ID, JOB_DATE, JOB_SEQ, JOB_TYPE, EQUIP_TYPE, ORDER_NO, ORDER_TYPE, COM_CD, SKU_CD, SKU_NM, BOX_TYPE_CD;
                                  
                -- 주문 데이터  status update 
                UPDATE ORDERS
                   SET STATUS = DECODE(ORDER_TYPE , 'OT' , 'A' , 'I')
                     , EQUIP_CD = DECODE(ORDER_TYPE , 'OT' , V_OT_RACK.RACK_CD , NULL)
                     , EQUIP_NM = DECODE(ORDER_TYPE , 'OT' , V_OT_RACK.RACK_NM , NULL)
                 WHERE DOMAIN_ID = P_IN_DOMAIN_ID
                   AND BATCH_ID = V_BATCH.ID;

                -- 작업 배치 status instructed_At, update 
                UPDATE JOB_BATCHES
                   SET STATUS = 'RUN'
                     , INSTRUCTED_AT = SYSDATE
                 WHERE ID = V_BATCH.ID;
                 
                -- 랙에 배치 할당 .
                UPDATE RACKS
                   SET BATCH_ID = V_BATCH.ID
                     , UPDATED_AT = SYSDATE
                 WHERE DOMAIN_ID = P_IN_DOMAIN_ID
                   AND AREA_CD = V_BATCH.AREA_CD
                   AND STAGE_CD = V_BATCH.STAGE_CD
                   AND ACTIVE_FLAG = 1;
            
            END IF;
            
        END IF;
        
    ELSE 
        -- TODO : 주문에 랙이 지정된 경우 처리
            -- TODO : 나중에 .....
            P_OUT_RESULT_CODE := 0;
    END IF;


    -- 정상 처리 
    P_OUT_RESULT_CODE := 0;
    P_OUT_MESSAGE := 'OK';

EXCEPTION
    WHEN OTHERS THEN
        P_OUT_RESULT_CODE := SQLCODE;

        -- 개발자 에러 코드의 경우 메시지만 return
        IF SQLCODE = -20999 THEN
            P_OUT_MESSAGE := LTRIM(SUBSTR(SQLERRM, 11, 200));
        ELSE 
            -- 오라클 자체 에러인 경우 전체 메시지 리턴 
            P_OUT_MESSAGE := SUBSTR(SQLERRM, 1, 200);
            RAISE;
        END IF;

END OP_INSTRUCT_DPS_BATCH;